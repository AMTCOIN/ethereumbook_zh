== 钱包

((("wallets", "defined")))“钱包”一词用来描述以太坊中几种不同的事物。

从较高层次上看，钱包是作为主要用户界面的应用程序。钱包控制对用户资金的访问，管理密钥和地址，追踪余额，以及创建和签署交易。此外，有些以太坊钱包还可以与代币合约进行交互。

更狭义的来说，从程序员的角度来看，“钱包”一词是指用于存储和管理用户密钥的系统。每种“钱包”都有一个密钥管理组件。对于某些钱包来说，这就是全部了。其他一些钱包广义来说更像是“浏览器”的一部分，它们是基于以太坊的去中心化应用程序或“dapps”的接口。以“钱包”为名之下，钱包以各种形式类型混合存在，它们之间并没有明确的区分。

在本节中，我们将把钱包看作密钥的容器，并将其视为管理密钥的系统。

=== 钱包技术概述

在本节中，我们总结用于构建用户友好，安全和灵活的以太坊钱包的各种技术。
((("wallets", "contents of")))关于以太坊的一个常见误解是以太坊钱包包含了以太坊或代币。实际上，钱包只包含密钥。以太坊或其他代币记录在以太坊区块链中。用户通过使用钱包中的密钥来签署交易从而控制网络上的代币。((("keychains")))从某种意义上说，以太坊钱包是一个钥匙串（_keychain_）。

[TIP]
====
以太坊钱包包含密钥，而不是以太坊或代币。每个用户都有一个包含密钥的钱包。钱包是真正包含成对私钥/公钥的钥匙串（参见<<private_public_keys>>）。用户使用密钥签署交易，从而证明他们拥有以太坊。以太坊储存在区块链上。
====

((("wallets", "types of", "primary distinctions")))钱包主要有两种类型，通过它们包含的密钥是否彼此相关来区分。

((("JBOK wallets", seealso="wallets")))((("wallets", "types of", "JBOK wallets")))((("nondeterministic wallets", seealso="wallets")))第一种类型是非确定性钱包（_nondeterministic wallet_），其中每个密钥都是从随机数独立生成的。密钥之间并不相互关联。这种类型的钱包也被称为JBOK钱包，这个词语来自于"Just a Bunch Of Keys"（一堆私钥）。

((("deterministic wallets", seealso="wallets")))第二种类型的钱包是确定性钱包（_deterministic wallet_），其中所有密钥都来自单个主密钥，主密钥也被称为种子。此类钱包中的所有密钥都是相互关联的，如果有原始种子，密钥可以再次生成。确定性钱包中使用了许多不同的密钥推导方法。最常用的推导方法采用树状结构，被称为分层确定性钱包或HD钱包。

((("mnemonic code words")))确定性钱包是从种子初始化的。为了更容易使用，种子被编码为英文单词（或其他语言中的单词），也称为助记码词汇。

接下来的几节将高度介绍这些技术。

[[random_wallet]]
==== 非确定性（随机）钱包

((("wallets", "types of", "nondeterministic (random) wallets")))在首个以太坊钱包（在以太坊预售时推出）中，钱包文件存储了一个随机生成的私人密钥。这些钱包正在被确定性的钱包取代，因为它们管理、备份和导入很麻烦。随机密钥的缺点是，如果你生成了许多密钥，你必须保留所有密钥的副本。每个密钥都必须备份，否则如果钱包变得不可访问，则其控制的资金将不可撤销地丢失。此外，以太坊地址通过将多个交易和地址相互关联重用来降低隐私。0型非确定性钱包是一种差劲的选择，特别是如果您想避免地址重用，这意味着管理许多密钥，需要频繁备份。

许多以太坊客户端（包括go-ethereum或geth）使用keystore(密钥库)文件，这是一个JSON编码文件，其中包含一个（随机生成的）私钥，由一个密码加密以提高安全性。JSON文件内容如下所示：
[[keystore_example]]
[source,json]
----
{
    "address": "001d3f1ef827552ae1114027bd3ecf1f086ba0f9",
    "crypto": {
        "cipher": "aes-128-ctr",
        "ciphertext": "233a9f4d236ed0c13394b504b6da5df02587c8bf1ad8946f6f2b58f055507ece",
        "cipherparams": {
            "iv": "d10c6ec5bae81b6cb9144de81037fa15"
        },
        "kdf": "scrypt",
        "kdfparams": {
            "dklen": 32,
            "n": 262144,
            "p": 1,
            "r": 8,
            "salt": "99d37a47c7c9429c66976f643f386a61b78b97f3246adca89abe4245d2788407"
        },
        "mac": "594c8df1c8ee0ded8255a50caf07e8c12061fd859f4b7c76ab704b17c957e842"
    },
    "id": "4fcb2ba4-ccdb-424f-89d5-26cce304bf9c",
    "version": 3
}
----

密钥库格式使用密钥衍生函数（KDF），也称为密码扩展算法，可防止对密码加密的暴力破解，字典攻击或彩虹表攻击。简而言之，私钥没有直接由密码加密。相反，密码通过重复哈希来延长。哈希函数重复262144轮，可以在密钥库JSON中作为参数crypto.kdfparams.n看到。试图暴力破解密码的攻击者必须对每一个企图破解的密码进行262144轮哈希，这足以减缓攻击行为，并因为足够复杂和长度的密码而变得不可行。

有许多软件库可以读写密钥库格式，例如JavaScript库 +keythereum+：
https://github.com/ethereumjs/keythereum

[TIP]
====
对于简单测试以外的任何情况都不鼓励使用非确定性钱包。它们备份和使用太麻烦了。取而代之，请使用带有助记词种子的基于行业标准的HD钱包进行备份。
====

==== 确定性（种子）钱包

((("wallets", "types of", "deterministic (seeded) wallets")))确定性钱包，或“种子”钱包是包含私钥的钱包，这些私钥都是通过使用单向哈希函数从公共种子衍生而来的。这种子是随机生成的数字，并含有比如索引号码或可生成私钥的“链码”数据（参阅<<hd_wallets>>)。在确定性钱包中，种子足以恢复所有衍生密钥，因此在初始创建时单个备份就足够了。种子对于钱包的导出或导入也是够用的，这就允许用户在不同的钱包之间轻松迁移所有密钥。

[[hd_wallets]]
==== HD钱包（BIP-32 / BIP-44）

((("wallets", "types of", "hierarchical deterministic (HD) wallets")))((("hierarchical deterministic (HD) wallets")))((("bitcoin improvement proposals", "Hierarchical Deterministic Wallets (BIP-32/BIP-44)")))确定性钱包的开发使得从单个“种子”中衍生出许多密钥变得容易。基于比特币BIP-32标准的HD钱包是最先进的确定性钱包。HD钱包包含了树形结构衍生的密钥，即一个父密钥可以生成一系列的子密钥，每个子密钥可以生成一系列孙密钥，以此无穷类推。这个树形结构参见图，<<hd_wallet>>.

[[hd_wallet]]
.HD钱包：从单个种子生成的密钥树
image::images/hd_wallet.png["HD wallet"]

与随机（非确定性）密钥相比，HD钱包具有两大优势。首先，树结构可以用来表达额外的组织含义，例如，子钥的某个分支用于收款，另一个分支用于付账。密钥的分支结构也可用于企业设置，可将不同分支分配给部门、子公司、特定职位或会计类别。

HD钱包的第二个优点是用户可以创建一系列公钥，而无需访问相应的私钥。这使得HD钱包可以用在不安全的服务器上，或者用于仅查看或仅接收的地方，因为这些地方不需要使用私钥来花费资金。

==== 种子和助记词码（BIP-39）

((("wallets", "technology of", "seeds and mnemonic codes")))((("mnemonic code words")))((("Bitcoin improvement proposals", "Mnemonic Code Words (BIP-39)")))HD钱包拥有管理大量密钥和地址的强大机制。如果它们通过易于转抄，导出、导入钱包的一串英文单词（或其他语言的单词）方式来标准化的创建种子，那么它们就会更加易用。这被称为助记词，标准由BIP-39定义。今天，许多以太坊钱包（以及其他加密货币的钱包）都使用此标准，并且使用可互用的助记词来导入和导出种子以进行备份和恢复。

我们从实际的角度来看这个。下列哪种种子更易于转录、在纸上记录、无误地读取、导出并导入另一个钱包？

.确定性钱包的种子，十六进制形式
----
FCCF1AB3329FD5DA3DA9577511F8F137
----

.确定性钱包的种子，12个单词的助记词
----
wolf juice proud gown wool unfair
wall cliff insect more detail hub
----


==== 钱包的最佳实践

((("wallets", "best practices for")))((("Bitcoin improvement proposals", "Multipurpose HD Wallet Structure (BIP-43)")))随着加密货币钱包技术的成熟，一些行业标准的也开始出现了。 这些标准的出现使得钱包更有互通性，容易使用，安全而且更具有灵活性。这些标准适合钱包支持使用一套助记码词组衍生出多个不同类型加密货币的秘钥。这些公共标准如下所列:

* 助记码词组（Mnemonic code words）, 基于 BIP-39
* HD 钱包（HD wallets）, 基于 BIP-32
* 多用途 HD 钱包结构（Multipurpose HD wallet structure）, 基于 BIP-43
* 多货币及多账户钱包（Multicurrency and multiaccount wallets）, 基于 BIP-44

这些标准也许在将来的开发中会有改变或被淘汰，但是就现在而言它们构成了一套联锁技术，成为了大多数加密货币事实上使用的钱包标准。

这些标准被一系列软件钱包和硬件钱包广泛采纳，使得这些钱包间具备互操作性。用户导出其中任意一款钱包生成的助记码词组，导入另外一款钱包同样能够恢复所有的交易记录，秘钥和地址。

////
TODO: More complete list of BIP-39/32/43/44 wallets in Ethereum
////

支持这些标准的软件钱包包括（按照字母排序）Jaxx， MetaMask， MyEtherWallet (MEW)。 ((("hardware wallets")))((("hardware wallets", see="also wallets"))) 支持这些标准的硬件钱包包括（按照字母排序） Keepkey， Ledger， 和 Trezor。


下面的章节将逐项检查这些技术的细节。
[TIP]
====
如果你在实现一个以太坊钱包，它应该被创建为HD钱包，使用编码成助记码词组的种子作为备份，并遵循下面章节将描述的 BIP-32， BIP-39， BIP-43 和 BIP-44 标准。

====

[[bip39]]
[[mnemonic_code_words]]
==== 助记码词组（Mnemonic Code Words） (BIP-39)

((("wallets", "technology of", "mnemonic code words")))((("mnemonic code words", id="mnemonic05")))((("bitcoin improvement proposals", "Mnemonic Code Words (BIP-39)", id="BIP3905")))
助记码词组是一组单词序列，它们表示（编码）了一个随机的数字即种子用来派生出一个确定性钱包。这个序列足够重建种子，由种子重建钱包以及所有蹭派生出的秘钥。当第一次创建使用助记码词组实现的确定性钱包时，系统会为用户显示由12或24个英文单词组成的序列。这个序列就是钱包的备份，可以在同样或者兼容的钱包应用中恢复和重建所有的秘钥。相比随机的助记码词组使得备份钱包变得简单，因为对用户来说这些词组容易辨识并较容易正确的誊写。

[TIP]
====
((("brainwallets")))助记码词组通常容易和“脑钱包（brainwallets）”相混淆。他们是不同的，最主要的区别是脑钱包由用户选择的词组，而助记码词组是由钱包随机生成并展示给用户的。这点重要的区别使得助记码词组钱包更加的安全，因为人类大脑不是很好的随机性来源。
====

助记码在BIP-319中定义。注意BIP-39是助记码标准的一种实现。有另外一种标准，_使用不同的词组_,被Electrum比特币钱包使用并且早于BIP-39。BIP-39是被Trezor硬件钱包背后的公司所提议并且兼容Electrum的实现。不过BIP-39目前已获得业界几十种可互操作钱包实现的广泛支持，应该被认为是事实上的业界标准。另外BIP-39可以被用来生成多币种钱包并支持以太坊，但Electrum种子并不可以。

////
TODO: Make sure Electrum seeds are not usable for Ethereum
////

BIP-39 定义了助记码和种子的创建，我们在这里分9步描述。为清楚起见，这个过程被分成了两部分：第一到第六步在<<generating_mnemonic_words>> 第七到第九步在<<mnemonic_to_seed>>

[[generating_mnemonic_words]]
===== 生成助记码词组


助记码词组是钱包依照BIP-39定义的标准流程自动生成的。钱包从一点信息熵开始，增加校验码，然后将信息熵关联到一组单词：

1. 创建一段128或256位的二进制序列（信息熵）。
2. 取这段序列SHA256哈希值的前x位（x=熵-长度/32）作为校验码。
3. 将校验码添加到序列后端。
4. 将序列进行拆分，每段11位。
5. 依据提前定义好的包含2048个单词的字典将每段映射为一个单词。
6. 助记码词组就是这些单词构成的序列。

<<generating_entropy_and_encoding>> 展示了信息熵如何被用来生成助记码词组的。

[[generating_entropy_and_encoding]]
[role="smallerseventy"]
.Generating entropy and encoding as mnemonic words生成信息熵并编码为助记码词组
image::images/bip39-part1.png["Generating entropy and encoding as mnemonic words生成信息熵并编码为助记码词组"]

<<table_bip39_entropy>> shows the relationship between the size of the entropy data and the length of mnemonic codes in words.展示了信息熵大小与助记码词组数量的关系。

[[table_bip39_entropy]]
.Mnemonic codes: entropy and word length
[options="header"]
|=======
|信息熵 (bits) | 校验码 (bits) | 信息熵 *+* 校验码 (bits) | 助记码数量 (words)
| 128 | 4 | 132 | 12
| 160 | 5 | 165 | 15
| 192 | 6 | 198 | 18
| 224 | 7 | 231 | 21
| 256 | 8 | 264 | 24
|=======

[[mnemonic_to_seed]]
===== 从助记码到种子

((("key-stretching function")))((("PBKDF2 function")))助记码词组代表了128位或者256位的信息熵。通过PBKDF2秘钥伸展功能信息熵衍生出一个更长的（512位）种子。这个种子随后被用来创建确定性钱包以及衍生相关秘钥。

((("salts")))((("passphrases")))秘钥伸展功能需要两个参数：助记码和_盐（salt）_。秘钥伸展的目的是为了让创建彩虹表更加困难并以此防止暴力破解。在BIP-39标准中，盐有另外的用途&#x2014;它允许引入密码口令（passphrase）作为一种额外的保护种子的安全机制，我们会在<<mnemonic_passphrase>>更加详细的描述。

第七到第九步从前面描述的过程 <<generating_mnemonic_words>> 后继续：
++++
<ol start="7">
	
	<li>PBKDF2秘钥伸展的第一个参数是第6步生成的 <em>助记码</em> 。</li>
	<li>第二个参数是一段<em>盐</em>。盐是由固定字符串"<code>mnemonic</code>"串联一段可选的由用户提供的密码短语字符串构成。</li>
	<li>PBKDF2 使用HMAC-SHA512算法进行2048轮哈希, 生成一个 512位的值作为最终输出. 这个512位的值就是种子.</li>
</ol>
++++

<<fig_5_7>>展示一段助记码词组如何生成一个种子

[[mnemonic_to_seed_figure]]
.From mnemonic to seed从助记码到种子
image::images/bip39-part2.png["From mnemonic to seed从助记码到种子"]

[TIP]
====
秘钥伸展功能，以及它的2048轮哈希预算，在一定程度上是一种有效的针对助记码或密码短语暴力破解保护。它使得尝试几千种密码短语和助记码词组组合比较耗费计算资源，但同时可能衍生出的的种子数量是巨大的(2^512^)。
====

表格 pass:[<a data-type="xref" href="#mnemonic_128_no_pass" data-xrefstyle="select: labelnumber">#mnemonic_128_no_pass</a>], pass:[<a data-type="xref" href="#mnemonic_128_w_pass" data-xrefstyle="select: labelnumber">#mnemonic_128_w_pass</a>], and pass:[<a data-type="xref" href="#mnemonic_256_no_pass" data-xrefstyle="select: labelnumber">#mnemonic_256_no_pass</a>] 展示了一些助记码组合和它们能够生产的种子（不用密码短语）。

[[mnemonic_128_no_pass]]
.128-bit entropy mnemonic code, no passphrase, resulting seed 128位信息熵助记码，不使用用密码短语，生成种子
[cols="h,"]
|=======
| *信息熵输入 (128 位)*| +0c1e24e5917779d297e14d45f14e1a1a+
| *助记码 (12 个词)* | +army van defense carry jealous true garbage claim echo media make crunch+
| *密码短语*| (无)
| *种子  (512 位)* | +5b56c417303faa3fcba7e57400e120a0ca83ec5a4fc9ffba757fbe63fbd77a89a1a3be4c67196f57c39+
+a88b76373733891bfaba16ed27a813ceed498804c0570+
|=======

[[mnemonic_128_w_pass]]
.128-bit entropy mnemonic code, with passphrase, resulting seed 128位信息熵助记码，使用密码短语，生成种子
[cols="h,"]
|=======
| *信息熵输入 (128 位)*| +0c1e24e5917779d297e14d45f14e1a1a+
| *助记码 (12 个词)* | +army van defense carry jealous true garbage claim echo media make crunch+
| *密码短语*| SuperDuperSecret
| *种子  (512 位)* | +3b5df16df2157104cfdd22830162a5e170c0161653e3afe6c88defeefb0818c793dbb28ab3ab091897d0+
+715861dc8a18358f80b79d49acf64142ae57037d1d54+
|=======


[[mnemonic_256_no_pass]]
.256-bit entropy mnemonic code, no passphrase, resulting seed 256位信息熵助记码，不使用密码短语，生成种子
[cols="h,"]
|=======
| *信息熵输入 (256 位)* | +2041546864449caff939d32d574753fe684d3c947c3346713dd8423e74abcf8c+
| *助记码 (24 个词)* | +cake apple borrow silk endorse fitness top denial coil riot stay wolf
luggage oxygen faint major edit measure invite love trap field dilemma oblige+
| *密码短语*| (无)
| *种子 (512 位)* | +3269bce2674acbd188d4f120072b13b088a0ecf87c6e4cae41657a0bb78f5315b33b3a04356e53d062e5+
+5f1e0deaa082df8d487381379df848a6ad7e98798404+
|=======

[[mnemonic_passphrase]]
===== BIP-39 中可选的密码短语

((("passphrases")))BIP-39 标准允许在派生种子的时候使用一个可选的密码短语。如果不使用密码短语，助记码会被以字符串+"mnemonic"+为盐伸展，生成512位的种子。如果使用了密码短语，同样的助记码被伸展后会生成一个_不同_的种子。实际上，对于同样的助记码任何可能的密码短语都会生成不同的种子。本质上来看并没有“错误”的密码短语。所有的密码短语都是有效的并且会导向不同的种子，构成一组数量巨大（2^512^）潜在未初始化的钱包。数量之多使得没有实际的暴力破解或者偶然猜测获得使用的可能，只要密码短语有足够的长度和复杂性。
[TIP]
====
BIP-39中没有“错误的”密码短语，每一个密码短语都能导向一些钱包，它们除非之前用过否则是空的。
====

可选的密码短语提供了两个重要的特性：

* 可以使助记码词组本身无效的第二保护因素（记忆下来的东西），防止助记码备份被窃贼破解。

* 一种貌似可信的推诿手段或者“被威胁钱包”，使用某个特定的助记短语导向一个资金较小的钱包用来误导攻击者，从而保护真正存有大量资金的钱包。

但是，需要注意的是使用助记短语同样带来了一点损失的风险：

* 如果钱包的所有者丧失行为能力或者死亡并且没有人指导助记短语，种子会变得没有用处存在钱包里的所有资金都永远消失了。
* 相反的，如果拥有者将助记短语和种子备份在同样的地方，那么第二保护因素就失去了意义。

尽管助记短语非常有用，但是它们应该仅在有非常小心的备份和恢复计划的情况下使用，考虑到其比所有者存在更长时间的可能，允许他/她的家人恢复加密货币资产。
===== 使用助记码词组

BIP-39 的实现库有多种编程语言版本：

https://github.com/trezor/python-mnemonic[python-mnemonic]:: 提出BIP-39的中本聪实验室团队的参考实现版本，使用python开发。

https://github.com/ConsenSys/eth-lightwallet[Consensys/eth-lightwallet]::  轻量级JS以太坊钱包提供给节点和浏览器（使用BIP-39）

https://www.npmjs.com/package/bip39[npm/bip39]:: 比特币BIP39的JavaScript实现：助记码用来生成确定性秘钥

还有一个使用可脱机网页实现的BIP-39生成器，对于测试和实验来说非常有用。 <<a_bip39_generator_as_a_standalone_web_page>> 展示了这个可脱机页面，它能够生成助记码，种子以及扩展出私钥。

[[a_bip39_generator_as_a_standalone_web_page]]
.A BIP-39 generator as a standalone web page
image::images/bip39_web.png["BIP-39 generator web-page"]

((("", startref="mnemonic05")))((("", startref="BIP3905")))这个页面(https://iancoleman.github.io/bip39/) 可以在浏览器内离线使用，或者在线访问。


==== Creating an HD Wallet from the Seed

((("wallets", "technology of", "creating HD wallets from root seed")))((("root seeds")))((("hierarchical deterministic (HD) wallets")))HD wallets are created from a single _root seed_, which is a 128-, 256-, or 512-bit random number. Most commonly, this seed is generated from a _mnemonic_ as detailed in the previous section.

Every key in the HD wallet is deterministically derived from this root seed, which makes it possible to re-create the entire HD wallet from that seed in any compatible HD wallet. This makes it easy to back up, restore, export, and import HD wallets containing thousands or even millions of keys by simply transferring only the mnemonic that the root seed is derived from.

==== Hierarchical Deterministic Wallets (BIP-32) and paths (BIP-43/44)

Most HD wallets follow the BIP-32 standard, which has become a de-facto industry standard for deterministic key generation. You can read the detailed specification in:

https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki

We won't be discussing the details of BIP-32 here, only the components necessary to understand how it is used in wallets. There are dozens of interoperable implementations of BIP-32 offered in many software libraries:

https://github.com/ConsenSys/eth-lightwallet[Consensys/eth-lightwallet]:: Lightweight JS Ethereum Wallet for nodes and browser (with BIP-32)

There is also a BIP-32 standalone web page generator that is very useful for testing and experimentation with BIP-32:

http://bip32.org/

[NOTE]
====
The standalone BIP-32 generator is not an HTTPS site. That's to remind you that the use of this tool is not secure. It is only for testing. You should not use the keys produced by this site in production (with real funds).
====

===== Extended public and private keys

In BIP-32 terminology, a parent key that can be extended to produce "children," is called an _extended key_. If it is a private key, it is an _extended private key_ distinguished by the prefix _xprv_:

----
xprv9s21ZrQH143K2JF8RafpqtKiTbsbaxEeUaMnNHsm5o6wCW3z8ySyH4UxFVSfZ8n7ESu7fgir8imbZKLYVBxFPND1pniTZ81vKfd45EHKX73
----

An _extended public key_ is distinguished by the prefix _xpub_:

----
xpub661MyMwAqRbcEnKbXcCqD2GT1di5zQxVqoHPAgHNe8dv5JP8gWmDproS6kFHJnLZd23tWevhdn4urGJ6b264DfTGKr8zjmYDjyDTi9U7iyT
----


A very useful characteristic of HD wallets is the ability to derive public child keys from public parent keys, _without_ having the private keys. This gives us two ways to derive a child public key: either from the child private key, or directly from the parent public key.

An extended public key can be used, therefore, to derive all of the _public_ keys (and only the public keys) in that branch of the HD wallet structure.

This shortcut can be used to create very secure public key&#x2013;only deployments where a server or application has a copy of an extended public key and no private keys whatsoever. That kind of deployment can produce an infinite number of public keys and Ethereum addresses, but cannot spend any of the money sent to those addresses. Meanwhile, on another, more secure server, the extended private key can derive all the corresponding private keys to sign transactions and spend the money.

One common application of this solution is to install an extended public key on a web server that serves an e-commerce application. The web server can use the public key derivation function to create a new Ethereum address for every transaction (e.g., for a customer shopping cart). The web server will not have any private keys that would be vulnerable to theft. Without HD wallets, the only way to do this is to generate thousands of Ethereum addresses on a separate secure server and then preload them on the e-commerce server. That approach is cumbersome and requires constant maintenance to ensure that the e-commerce server doesn't "run out" of keys.

((("cold storage")))((("storage", "cold storage")))((("hardware wallets")))Another common application of this solution is for cold-storage or hardware wallets. In that scenario, the extended private key can be stored on a hardware wallet, while the extended public key can be kept online. The user can create "receive" addresses at will, while the private keys are safely stored offline. To spend the funds, the user can use the extended private key on an offline signing Ethereum client or sign transactions on the hardware wallet device.

===== Hardened child key derivation

((("public and private keys", "hardened child key derivation")))((("hardened derivation")))The ability to derive a branch of public keys from an xpub is very useful, but it comes with a potential risk. Access to an xpub does not give access to child private keys. However, because the xpub contains the chain code, if a child private key is known, or somehow leaked, it can be used with the chain code to derive all the other child private keys. A single leaked child private key, together with a parent chain code, reveals all the private keys of all the children. Worse, the child private key together with a parent chain code can be used to deduce the parent private key.

To counter this risk, HD wallets use an alternative derivation function called _hardened derivation_, which "breaks" the relationship between parent public key and child chain code. The hardened derivation function uses the parent private key to derive the child chain code, instead of the parent public key. This creates a "firewall" in the parent/child sequence, with a chain code that cannot be used to compromise a parent or sibling private key.

In simple terms, if you want to use the convenience of an xpub to derive branches of public keys, without exposing yourself to the risk of a leaked chain code, you should derive it from a hardened parent, rather than a normal parent. As a best practice, the level-1 children of the master keys are always derived through the hardened derivation, to prevent compromise of the master keys.

===== Index numbers for normal and hardened derivation

The index number used in the BIP-32 derivation function is a 32-bit integer. To easily distinguish between keys derived through the normal derivation function versus keys derived through hardened derivation, this index number is split into two ranges. Index numbers between 0 and 2^31^&#x2013;1 (0x0 to 0x7FFFFFFF) are used _only_ for normal derivation. Index numbers between 2^31^ and 2^32^&#x2013;1 (0x80000000 to 0xFFFFFFFF) are used _only_ for hardened derivation. Therefore, if the index number is less than 2^31^, the child is normal, whereas if the index number is equal or above 2^31^, the child is hardened.

To make the index number easier to read and display, the index number for hardened children is displayed starting from zero, but with a prime symbol. The first normal child key is therefore displayed as 0, whereas the first hardened child (index 0x80000000) is displayed as 0++&#x27;++. In sequence then, the second hardened key would have index 0x80000001 and would be displayed as 1++&#x27;++, and so on. When you see an HD wallet index i++&#x27;++, that means 2^31^+i.

===== HD wallet key identifier (path)

((("hierarchical deterministic (HD) wallets")))Keys in an HD wallet are identified using a "path" naming convention, with each level of the tree separated by a slash (/) character (see <<hd_path_table>>). Private keys derived from the master private key start with "m." Public keys derived from the master public key start with "M." Therefore, the first child private key of the master private key is m/0. The first child public key is M/0. The second grandchild of the first child is m/0/1, and so on.

The "ancestry" of a key is read from right to left, until you reach the master key from which it was derived. For example, identifier m/x/y/z describes the key that is the z-th child of key m/x/y, which is the y-th child of key m/x, which is the x-th child of m.

[[hd_path_table]]
.HD wallet path examples
[options="header"]
|=======
|HD path | Key described
| m/0 | The first (0) child private key from the master private key (m)
| m/0/0 | The first grandchild private key of the first child (m/0)
| m/0'/0 | The first normal grandchild of the first _hardened_ child (m/0')
| m/1/0 | The first grandchild private key of the second child (m/1)
| M/23/17/0/0 | The first great-great-grandchild public key of the first great-grandchild of the 18th grandchild of the 24th child
|=======

===== Navigating the HD wallet tree structure

The HD wallet tree structure offers tremendous flexibility. Each parent extended key can have 4 billion children: 2 billion normal children and 2 billion hardened children. Each of those children can have another 4 billion children, and so on. The tree can be as deep as you want, with an infinite number of generations. With all that flexibility, however, it becomes quite difficult to navigate this infinite tree. It is especially difficult to transfer HD wallets between implementations, because the possibilities for internal organization into branches and subbranches are endless.

Two BIPs offer a solution to this complexity by creating some proposed standards for the structure of HD wallet trees. BIP-43 proposes the use of the first hardened child index as a special identifier that signifies the "purpose" of the tree structure. Based on BIP-43, an HD wallet should use only one level-1 branch of the tree, with the index number identifying the structure and namespace of the rest of the tree by defining its purpose. For example, an HD wallet using only branch m/i++&#x27;++/ is intended to signify a specific purpose and that purpose is identified by index number "i."

Extending that specification, BIP-44 proposes a multicurrency multiaccount structure as "purpose" number +44'+ under BIP-43. All HD wallets following the BIP-44 structure are identified by the fact that they only used one branch of the tree: m/44'/.

BIP-44 specifies the structure as consisting of five predefined tree levels:

-----
m / purpose' / coin_type' / account' / change / address_index
-----

The first-level "purpose" is always set to +44'+. The second-level "coin_type" specifies the type of cryptocurrency coin, allowing for multicurrency HD wallets where each currency has its own subtree under the second level. There are several currencies defined in a standards document, called SLIP0044:

https://github.com/satoshilabs/slips/blob/master/slip-0044.md

A few examples: Ethereum is m/44++&#x27;++/60++&#x27;++, Ethereum Classic is m/44++&#x27;++/61++&#x27;++, Bitcoin is m/44++&#x27;++/0++&#x27;++, and Testnet for all currencies is m/44++&#x27;++/1++&#x27;++.

The third level of the tree is "account," which allows users to subdivide their wallets into separate logical subaccounts, for accounting or organizational purposes. For example, an HD wallet might contain two Ethereum "accounts": m/44++&#x27;++/60++&#x27;++/0++&#x27;++ and m/44++&#x27;++/60++&#x27;++/1++&#x27;++. Each account is the root of its own subtree.

((("keys and addresses", see="also public and private keys")))Because BIP-44 was created originally for bitcoin, it contains a "quirk" that isn't relevant in the Ethereum world. On the fourth level of the path, "change," an HD wallet has two subtrees, one for creating receiving addresses and one for creating change addresses. Only the "receive" path is used in Ethereum, as there is no such thing as a change address. Note that whereas the previous levels used hardened derivation, this level uses normal derivation. This is to allow this level of the tree to export extended public keys for use in a non-secured environment. Usable addresses are derived by the HD wallet as children of the fourth level, making the fifth level of the tree the "address_index." For example, the third receiving address for Ethereum payments in the primary account would be M/44++&#x27;++/60++&#x27;++/0++&#x27;++/0/2. <<bip44_path_examples>> shows a few more examples.

[[bip44_path_examples]]
.BIP-44 HD wallet structure examples
[options="header"]
|=======
|HD path | Key described
| M/44++&#x27;++/60++&#x27;++/0++&#x27;++/0/2 | The third receiving public key for the primary Ethereum account
| M/44++&#x27;++/0++&#x27;++/3++&#x27;++/1/14 | The fifteenth change-address public key for the fourth bitcoin account
| m/44++&#x27;++/2++&#x27;++/0++&#x27;++/0/1 | The second private key in the Litecoin main account, for signing transactions
|=======
