== Ethereum Virtual Machine

=== What is it?

==== Compare to

* Virtual Machine (Virtualbox, QEMU, cloud computing)

* Java VM

Virtual Machine technologies such as Virtualbox and QEMU/KVM differ from the EVM in that their purpose is to provide hypervisor functionality, or a software abstraction that handles system calls, task scheduling, and resource management between a guest OS and the underlying host OS and hardware.

Certain aspects of the Java VM (JVM) specification however, do contain similarities to the EVM. From a high-level overview, the JVM is designed to provide a runtime environment that is irrespective of the underlying host OS or hardware, enabling compatibility across a wide variety of systems. High level program languages such as Java or Scala that run on the JVM are compiled into the respective instruction set bytecode. This is comparable to compiling a Solidity source file to run on the EVM.

==== EVM Machine Language (Bytecode)

The EVM Machine Language is divided into specific instruction set groups, such as arithmetic operations, logical and comparison operations, control flow, system calls, stack operations, and memory operations. In addition to the typical bytecode operations, the EVM must also manage account information (i.e. address and balance), current gas price, and block information.

==== State

==== Compiling Solidity to EVM bytecode

Compiling a Solidity source file to EVM bytecode can be accomplished via the command line. For a list of additional compile options, simply run the following command:

----
$ solc --help
----

Generating the raw opcode of a Solidity source file is easily achieved with the _--opcodes_ command line option. For example, compiling an example Solidity file _Example.sol_ and populating the opcode output into a directory named _BytecodeDir_ is accomplished with the following command:

----
$ solc -o BytecodeOutputDir --opcodes Example.sol
---- 

The output opcode files generated will depend on the specific contracts contained within the Solidity source file. Our simple Solidity file _Example.sol_ has only one contract named "example".

----
pragma solidity ^0.4.19;

contract example {

  address contractOwner;

  function example() {
    contractOwner = msg.sender;
  }
}
----

If you look in the _BytecodeDir_ directory, you will see the opcode file _example.opcode_ which contains the EVM machine language instructions of the "example" contract. Opening up the _example.opcode_ file in a text editor will show the following:

----
PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH2 0xF JUMPI PUSH1 0x0 DUP1 
/*snip*/
----

Let's examine the first two instructions:

----
PUSH1 0x60 PUSH1 0x40
----

Here we have the _mnemonic_ "PUSH1" with a _value_ of "0x60". This corresponds to the EVM instruction of pushing a 1-byte item onto the stack. This operation is capable of pushing a 32-byte item on the stack with the following opcode:

----
PUSH32 0x7f
---- 

The second push opcode value "0x40" indicates the hash value of a complete block. 


==== Execution of EVM bytecode

==== Gas, Accounting

==== Turing Completeness and Gas
